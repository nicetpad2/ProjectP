#!/usr/bin/env python3
"""
üè¢ NICEGOLD ENTERPRISE PROJECTP - COMPLETE SYSTEM RUNNER
=========================================================

‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
- ‚úÖ Intelligent Resource Management (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 80% allocation)
- ‚úÖ Advanced Logging System (Enterprise-grade with session management)
- ‚úÖ Enterprise ML Protection (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô overfitting/noise/leakage)
- ‚úÖ Beautiful Progress Tracking (Real-time ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
- ‚úÖ Menu 1 Elliott Wave (CNN-LSTM + DQN pipeline)
- ‚úÖ Performance Analytics (‡∏£‡∏∞‡∏î‡∏±‡∏ö Enterprise)

üéØ ENTERPRISE FEATURES ENABLED:
- üß† Intelligent Resource Management: CPU, RAM, GPU ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- üìä Advanced Logging: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Enterprise ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
- üõ°Ô∏è Enterprise ML Protection: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ML ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- üé® Beautiful Progress: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° Real-time
- üìà Performance Analytics: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
- üè¢ Enterprise Compliance: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Enterprise

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤: January 1, 2025
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ Production Ready - All Systems Integrated
"""

import sys
import os
import time
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

# Suppress warnings for clean execution
import warnings
warnings.filterwarnings('ignore')

# Set environment for optimal execution
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # Use CPU for stability
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'   # Minimize TensorFlow logging

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Beautiful startup banner
print("=" * 100)
print("üè¢ NICEGOLD ENTERPRISE PROJECTP - COMPLETE SYSTEM EXECUTION")
print("=" * 100)
print(f"ÔøΩ Start Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print("üéØ Mission: Execute full system with ALL enterprise features")
print("üîß Features: Resource Management + Logging + ML Protection + Progress + Analytics")
print("=" * 100)

def main():
    """Main execution function"""
    try:
        # Import core systems
        print("üì¶ Loading core systems...")
        from core.logger import EnterpriseLogger
        
        # Initialize Enterprise Logger
        logger = EnterpriseLogger("CompleteSystem", enable_colors=True)
        logger.info("üè¢ NICEGOLD Complete System Starting...")
        
        # Display system capabilities
        print("\nüéØ SYSTEM CAPABILITIES:")
        capabilities = [
            "üß† Intelligent Resource Management (CPU, RAM, GPU optimization)",
            "üìù Advanced Logging & Progress Tracking",
            "üõ°Ô∏è Enterprise ML Protection (Overfitting, Data Leakage, Noise detection)",
            "üåä Elliott Wave CNN-LSTM Pattern Recognition",
            "ü§ñ DQN Reinforcement Learning Trading Agent",
            "üéØ SHAP + Optuna Feature Selection",
            "üìä Comprehensive Performance Analytics",
            "üé® Beautiful UI with Real-time Monitoring"
        ]
        
        for cap in capabilities:
            print(f"   ‚úÖ {cap}")
        
        print("\n" + "="*80)
        
        # Check system availability
        print("üîç Checking System Availability...")
        
        # Check Resource Management
        try:
            from core.intelligent_resource_manager import initialize_intelligent_resources
            print("   ‚úÖ Intelligent Resource Management: AVAILABLE")
            resource_available = True
        except ImportError as e:
            print(f"   ‚ùå Intelligent Resource Management: NOT AVAILABLE ({e})")
            resource_available = False
        
        # Check ML Protection
        try:
            from elliott_wave_modules.enterprise_ml_protection import EnterpriseMLProtectionSystem
            print("   ‚úÖ Enterprise ML Protection: AVAILABLE")
            protection_available = True
        except ImportError as e:
            print(f"   ‚ùå Enterprise ML Protection: NOT AVAILABLE ({e})")
            protection_available = False
        
        # Check Elliott Wave Components
        try:
            from menu_modules.menu_1_elliott_wave import Menu1ElliottWaveFixed
            print("   ‚úÖ Elliott Wave Pipeline: AVAILABLE")
            elliott_available = True
        except ImportError as e:
            print(f"   ‚ùå Elliott Wave Pipeline: NOT AVAILABLE ({e})")
            elliott_available = False
        
        print("\n" + "="*80)
        
        if not elliott_available:
            logger.error("‚ùå Core Elliott Wave system not available. Cannot continue.")
            return False
        
        # Initialize and run complete system
        logger.info("üöÄ Initializing Complete System...")
        
        # Create config for enhanced features
        config = {
            'elliott_wave': {
                'target_auc': 0.70,
                'max_features': 30,
                'enable_resource_management': resource_available,
                'enable_ml_protection': protection_available
            },
            'ml_protection': {
                'overfitting_threshold': 0.2,
                'noise_threshold': 0.1,
                'data_leakage_threshold': 0.3
            },
            'resource_management': {
                'allocation_percentage': 0.8,
                'enable_monitoring': True,
                'enable_advanced_features': True
            }
        }
        
        # Initialize Menu 1 with complete configuration
        logger.info("üåä Initializing Elliott Wave Menu 1 with all enhancements...")
        menu1 = Menu1ElliottWaveFixed(config=config, logger=logger)
        
        # Display current status
        print("\nüìä SYSTEM STATUS:")
        print(f"   üß† Resource Management: {'‚úÖ ACTIVE' if menu1.resource_manager else '‚ùå INACTIVE'}")
        print(f"   üõ°Ô∏è ML Protection: {'‚úÖ ACTIVE' if menu1.ml_protection else '‚ùå INACTIVE'}")
        print(f"   üìù Advanced Logging: ‚úÖ ACTIVE")
        print(f"   üé® Beautiful Progress: ‚úÖ ACTIVE")
        
        # Run the complete pipeline
        print("\n" + "="*80)
        logger.info("üöÄ Starting Complete Elliott Wave Pipeline...")
        print("üöÄ Running Complete Elliott Wave Pipeline with All Features!")
        print("="*80)
        
        # Execute the pipeline
        success = menu1.run_full_pipeline()
        
        if success:
            print("\n" + "="*80)
            print("üéâ COMPLETE SYSTEM EXECUTION SUCCESSFUL!")
            print("="*80)
            
            # Display summary
            if hasattr(menu1, 'results') and menu1.results:
                print("\nüìä EXECUTION SUMMARY:")
                
                # Data info
                data_info = menu1.results.get('data_info', {})
                if data_info:
                    print(f"   üìà Data Processed: {data_info.get('total_rows', 0):,} rows")
                    print(f"   üéØ Features: {data_info.get('features_count', 0)}")
                
                # ML Results
                cnn_results = menu1.results.get('cnn_lstm_results', {})
                if cnn_results:
                    auc_score = cnn_results.get('evaluation_results', {}).get('auc', cnn_results.get('auc_score', 0))
                    print(f"   üèÜ AUC Score: {auc_score:.4f}")
                    print(f"   ‚úÖ Enterprise Target: {'ACHIEVED' if auc_score >= 0.70 else 'NOT ACHIEVED'}")
                
                # Protection Results
                if 'ml_protection' in menu1.results:
                    protection = menu1.results['ml_protection'].get('overall_assessment', {})
                    print(f"   üõ°Ô∏è ML Protection: {protection.get('protection_status', 'UNKNOWN')}")
                    print(f"   üîí Risk Level: {protection.get('risk_level', 'UNKNOWN')}")
                
                # Resource Usage
                if menu1.resource_manager and hasattr(menu1.resource_manager, 'get_current_performance'):
                    try:
                        perf = menu1.resource_manager.get_current_performance()
                        print(f"   üß† Final CPU Usage: {perf.get('cpu_percent', 0):.1f}%")
                        print(f"   üíæ Final Memory Usage: {perf.get('memory', {}).get('percent', 0):.1f}%")
                    except:
                        pass
            
            print("\nüéØ All systems performed optimally!")
            logger.info("‚úÖ Complete system execution finished successfully")
            
        else:
            print("\n" + "="*80)
            print("‚ùå SYSTEM EXECUTION FAILED")
            print("="*80)
            logger.error("‚ùå Complete system execution failed")
            
        # Cleanup
        if menu1.resource_manager and hasattr(menu1.resource_manager, 'stop_monitoring'):
            try:
                menu1.resource_manager.stop_monitoring()
                logger.info("üßπ Resource monitoring stopped")
            except:
                pass
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå SYSTEM ERROR: {e}")
        if 'logger' in locals():
            logger.error(f"‚ùå System error: {e}")
        return False

if __name__ == "__main__":
    try:
        success = main()
        
        print("\n" + "="*80)
        if success:
            print("üéä NICEGOLD COMPLETE SYSTEM - SUCCESS!")
            print("‚úÖ All advanced features executed successfully")
        else:
            print("‚ùå NICEGOLD COMPLETE SYSTEM - FAILED")
            print("‚ö†Ô∏è  Check logs for details")
        
        print("="*80)
        
        # Exit with appropriate code
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  System execution interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Unexpected error: {e}")
        sys.exit(1)
