#!/usr/bin/env python3
"""
üîç SINGLE ENTRY POINT POLICY VALIDATOR
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ Single Entry Point ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 1 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: Enterprise Edition
"""

import sys
import os
import subprocess
from pathlib import Path
from typing import List, Dict, Tuple


class SingleEntryPointValidator:
    """‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ Single Entry Point"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.violations = []
        self.passed_tests = []
    
    def validate_policy(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üîç SINGLE ENTRY POINT POLICY VALIDATION")
        print("="*60)
        print()
        
        # Test 1: Check authorized entry point exists
        self._test_authorized_entry_point()
        
        # Test 2: Check unauthorized files redirect properly
        self._test_unauthorized_redirects()
        
        # Test 3: Check no alternative main files
        self._test_no_alternative_mains()
        
        # Test 4: Check documentation exists
        self._test_documentation_exists()
        
        # Print results
        self._print_results()
        
        return len(self.violations) == 0
    
    def _test_authorized_entry_point(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ProjectP.py ‡πÄ‡∏õ‡πá‡∏ô entry point ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        print("1Ô∏è‚É£ Testing Authorized Entry Point...")
        
        projectp_file = self.project_root / "ProjectP.py"
        if not projectp_file.exists():
            self.violations.append("‚ùå ProjectP.py not found - main entry point missing")
            return
        
        # Check if it has proper main block
        with open(projectp_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'if __name__ == "__main__"' not in content:
            self.violations.append("‚ùå ProjectP.py missing main execution block")
            return
        
        if 'ONLY AUTHORIZED ENTRY POINT' not in content:
            self.violations.append("‚ùå ProjectP.py missing entry point policy documentation")
            return
        
        self.passed_tests.append("‚úÖ ProjectP.py is properly configured as single entry point")
    
    def _test_unauthorized_redirects(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ ProjectP.py"""
        print("2Ô∏è‚É£ Testing Unauthorized File Redirects...")
        
        # Test ProjectP_Advanced.py
        advanced_file = self.project_root / "ProjectP_Advanced.py"
        if advanced_file.exists():
            with open(advanced_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'This is not a main entry point' not in content:
                self.violations.append("‚ùå ProjectP_Advanced.py not properly restricted")
            else:
                self.passed_tests.append("‚úÖ ProjectP_Advanced.py properly restricted")
        else:
            self.violations.append("‚ùå ProjectP_Advanced.py not found")
        
        # Test run_advanced.py
        run_advanced_file = self.project_root / "run_advanced.py"
        if run_advanced_file.exists():
            with open(run_advanced_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'Redirect to ProjectP.py' not in content:
                self.violations.append("‚ùå run_advanced.py not properly redirecting")
            else:
                self.passed_tests.append("‚úÖ run_advanced.py properly redirects to ProjectP.py")
        else:
            self.violations.append("‚ùå run_advanced.py not found")
    
    def _test_no_alternative_mains(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå main ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô"""
        print("3Ô∏è‚É£ Testing No Alternative Main Files...")
        
        # Files that should NOT have unrestricted main blocks
        restricted_files = [
            "ProjectP_Advanced.py",
            "run_advanced.py"
        ]
        
        for filename in restricted_files:
            filepath = self.project_root / filename
            if filepath.exists():
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Check if it has restricted main block
                if 'if __name__ == "__main__"' in content:
                    if ('ERROR' in content or 'redirect' in content.lower() or 
                        'not a main entry point' in content.lower()):
                        self.passed_tests.append(f"‚úÖ {filename} has restricted main block")
                    else:
                        self.violations.append(f"‚ùå {filename} has unrestricted main block")
        
        self.passed_tests.append("‚úÖ No unauthorized alternative main files found")
    
    def _test_documentation_exists(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ Single Entry Point"""
        print("4Ô∏è‚É£ Testing Policy Documentation...")
        
        # Check for policy documentation
        policy_files = [
            "ENTRY_POINT_POLICY.md",
            "README.md"
        ]
        
        for filename in policy_files:
            filepath = self.project_root / filename
            if filepath.exists():
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if 'SINGLE ENTRY POINT' in content or 'ProjectP.py' in content:
                    self.passed_tests.append(f"‚úÖ {filename} contains entry point policy documentation")
                else:
                    self.violations.append(f"‚ùå {filename} missing entry point policy documentation")
            else:
                self.violations.append(f"‚ùå {filename} documentation file missing")
    
    def _print_results(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        print()
        print("="*60)
        print("üìã VALIDATION RESULTS")
        print("="*60)
        
        # Show passed tests
        if self.passed_tests:
            print("\n‚úÖ PASSED TESTS:")
            for test in self.passed_tests:
                print(f"   {test}")
        
        # Show violations
        if self.violations:
            print("\n‚ùå POLICY VIOLATIONS:")
            for violation in self.violations:
                print(f"   {violation}")
        else:
            print("\nüéâ NO POLICY VIOLATIONS FOUND!")
        
        # Final status
        print("\n" + "="*60)
        if len(self.violations) == 0:
            print("üéØ VALIDATION STATUS: ‚úÖ PASSED")
            print("üöÄ Single Entry Point Policy PROPERLY ENFORCED")
        else:
            print("üéØ VALIDATION STATUS: ‚ùå FAILED")
            print(f"‚ö†Ô∏è  Found {len(self.violations)} policy violations")
        print("="*60)


def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ Single Entry Point"""
    validator = SingleEntryPointValidator()
    success = validator.validate_policy()
    
    if success:
        print("\nüéâ Single Entry Point Policy is properly enforced!")
        print("‚úÖ System ready for production use")
        return 0
    else:
        print("\n‚ö†Ô∏è  Single Entry Point Policy violations found!")
        print("üîß Please fix the violations before deployment")
        return 1


if __name__ == "__main__":
    sys.exit(main())
