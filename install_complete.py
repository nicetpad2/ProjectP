#!/usr/bin/env python3
"""
üöÄ NICEGOLD ProjectP - Complete Installation Script
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö NICEGOLD ProjectP ‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
"""
import os
import sys
import subprocess
import time

def print_status(message, status="INFO"):
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"""
    icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}
    print(f"{icons.get(status, '‚ÑπÔ∏è')} {message}")

def run_command(command, description=""):
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    if description:
        print_status(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á{description}...")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def install_dependencies():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏´‡∏•‡∏±‡∏Å"""
    print_status("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö NICEGOLD ProjectP...")
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip
    success, output = run_command("pip install --upgrade pip", "‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip")
    if success:
        print_status("pip ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "SUCCESS")
    else:
        print_status("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip ‡πÑ‡∏î‡πâ", "WARNING")
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á core packages
    core_packages = [
        "numpy==1.26.4",
        "pandas>=2.0.0",
        "scikit-learn>=1.3.0",
        "scipy>=1.10.0",
        "PyYAML>=6.0.0",
        "matplotlib>=3.5.0",
        "seaborn>=0.11.0",
        "plotly>=5.0.0",
        "colorama>=0.4.0",
        "optuna>=3.0.0"
    ]
    
    print_status("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á core packages...")
    for package in core_packages:
        success, output = run_command(f"pip install {package}")
        if success:
            print_status(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package.split('==')[0].split('>=')[0]} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
        else:
            print_status(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package} ‡πÑ‡∏î‡πâ", "WARNING")
    
    # ML packages (optional)
    ml_packages = [
        "tensorflow>=2.15.0",
        "torch>=2.0.0",
        "shap>=0.40.0"
    ]
    
    print_status("ü§ñ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ML packages (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô)...")
    for package in ml_packages:
        success, output = run_command(f"pip install {package}")
        if success:
            print_status(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package.split('>=')[0]} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
        else:
            print_status(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package} ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)", "WARNING")

def verify_installation():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"""
    print_status("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö core imports
    test_code = '''
import sys
sys.path.append("/content/drive/MyDrive/ProjectP")

try:
    import numpy as np
    import pandas as pd
    import sklearn
    import scipy
    print(f"‚úÖ NumPy: {np.__version__}")
    print(f"‚úÖ Pandas: {pd.__version__}")
    print(f"‚úÖ Scikit-learn: {sklearn.__version__}")
    print(f"‚úÖ SciPy: {scipy.__version__}")
    
    # Test ProjectP imports
    from elliott_wave_modules.enterprise_ml_protection import EnterpriseMLProtectionSystem
    print("‚úÖ Enterprise ML Protection System: OK")
    
    from core.config import load_enterprise_config
    print("‚úÖ Core Config: OK")
    
    from core.logger import setup_logger
    print("‚úÖ Core Logger: OK")
    
    print("\\nüéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
except Exception as e:
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    exit(1)
'''
    
    success, output = run_command(f'python -c "{test_code}"')
    if success:
        print(output)
        return True
    else:
        print_status("‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "ERROR")
        print(output)
        return False

def create_startup_script():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    startup_script = '''#!/usr/bin/env python3
"""
üöÄ NICEGOLD ProjectP - Quick Start
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
"""
import os
import sys
import warnings
warnings.filterwarnings('ignore')

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
project_path = "/content/drive/MyDrive/ProjectP"
sys.path.append(project_path)
os.chdir(project_path)

print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô NICEGOLD ProjectP...")
print("="*60)

try:
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    exec(open("ProjectP.py").read())
except KeyboardInterrupt:
    print("\\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô NICEGOLD ProjectP!")
except Exception as e:
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    print("üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python ProjectP.py")
'''
    
    with open("/content/drive/MyDrive/ProjectP/start_nicegold_complete.py", "w", encoding="utf-8") as f:
        f.write(startup_script)
    
    print_status("‡∏™‡∏£‡πâ‡∏≤‡∏á startup script ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "SUCCESS")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("="*60)
    print("üè¢ NICEGOLD ProjectP - Complete Installation")
    print("   ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NICEGOLD ProjectP")
    print("="*60)
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á directory ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    project_dir = "/content/drive/MyDrive/ProjectP"
    if os.path.exists(project_dir):
        os.chdir(project_dir)
        print_status(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {project_dir}", "SUCCESS")
    else:
        print_status(f"‡πÑ‡∏°‡πà‡∏û‡∏ö directory: {project_dir}", "ERROR")
        return
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
    install_dependencies()
    
    print("\\n" + "="*60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    if verify_installation():
        print_status("‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ", "SUCCESS")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á startup script
        create_startup_script()
        
        print("\\n" + "="*60)
        print("üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   1. ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å: python ProjectP.py")
        print("   2. ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ startup script: python start_nicegold_complete.py")
        print("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö: python simple_protection_test.py")
        print("="*60)
        print("\\n‚úÖ NICEGOLD ProjectP ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        
    else:
        print_status("‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", "ERROR")

if __name__ == "__main__":
    main()
