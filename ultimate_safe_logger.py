#!/usr/bin/env python3
"""
üîí ULTIMATE SAFE LOGGER - NICEGOLD ENTERPRISE
Logger ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å I/O errors ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö
"""

import logging
import sys
import io
from datetime import datetime
from contextlib import contextmanager

class UltimateSafeLogger:
    """Logger ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö"""
    
    def __init__(self, name="NICEGOLD"):
        self.name = name
        self.buffer = io.StringIO()
        
    def _safe_write(self, message, level="INFO"):
        """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100%"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            formatted_msg = f"[{timestamp}] {level}: {message}"
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á buffer
            self.buffer.write(formatted_msg + "\n")
            
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            try:
                print(formatted_msg)
                sys.stdout.flush()
            except:
                pass
                
        except Exception:
            # ‡∏´‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏ä‡πâ print ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            try:
                print(f"[LOG] {message}")
            except:
                pass
    
    def info(self, message):
        """Log level INFO"""
        self._safe_write(message, "INFO")
        
    def error(self, message):
        """Log level ERROR"""
        self._safe_write(message, "ERROR")
        
    def warning(self, message):
        """Log level WARNING"""
        self._safe_write(message, "WARNING")
        
    def debug(self, message):
        """Log level DEBUG"""
        self._safe_write(message, "DEBUG")
        
    def get_logs(self):
        """‡∏î‡∏∂‡∏á logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            return self.buffer.getvalue()
        except:
            return "Logs unavailable"

# Global instance
ultimate_logger = UltimateSafeLogger("NICEGOLD_ULTIMATE")

def get_ultimate_logger(name="NICEGOLD"):
    """‡πÑ‡∏î‡πâ logger ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö"""
    return UltimateSafeLogger(name)

@contextmanager
def safe_logging_context():
    """Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    logger = get_ultimate_logger()
    try:
        yield logger
    except Exception as e:
        try:
            print(f"[SAFE_LOG_ERROR] {e}")
        except:
            pass
