#!/usr/bin/env python3
"""
üîç QUICK RESOURCE INTEGRATION TEST
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ integration ‡∏Ç‡∏≠‡∏á Resource Management ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent))

def test_integration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ integration ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
    print("üîç QUICK RESOURCE INTEGRATION TEST")
    print("=" * 50)
    
    try:
        # Test UnifiedMasterMenuSystem
        print("1. Testing UnifiedMasterMenuSystem...")
        from core.unified_master_menu_system import UnifiedMasterMenuSystem
        menu = UnifiedMasterMenuSystem()
        print("   ‚úÖ UnifiedMasterMenuSystem imported")
        
        success = menu.initialize_components()
        print(f"   üìä Components initialized: {success}")
        print(f"   üß† Resource Manager: {'‚úÖ ACTIVE' if menu.resource_manager else '‚ùå NOT FOUND'}")
        print(f"   üåä Menu 1: {'‚úÖ READY' if menu.menu_1 else '‚ùå NOT READY'}")
        
        # Test Menu 1 directly
        print("\n2. Testing Enhanced Menu 1...")
        from menu_modules.enhanced_menu_1_elliott_wave import EnhancedMenu1ElliottWave
        menu1 = EnhancedMenu1ElliottWave()
        print("   ‚úÖ Enhanced Menu 1 imported")
        print(f"   üß† Unified RM: {'‚úÖ ACTIVE' if menu1.resource_manager else '‚ùå NOT FOUND'}")
        print(f"   üè¢ Enterprise RM: {'‚úÖ ACTIVE' if hasattr(menu1, 'enterprise_resource_manager') else '‚ùå NOT FOUND'}")
        
        # Test Resource Managers directly
        print("\n3. Testing Resource Managers...")
        
        # Test Unified Resource Manager
        try:
            from core.unified_resource_manager import get_unified_resource_manager
            rm = get_unified_resource_manager()
            print("   ‚úÖ Unified Resource Manager: WORKING")
        except Exception as e:
            print(f"   ‚ùå Unified Resource Manager: {e}")
        
        # Test High Memory Resource Manager
        try:
            from core.high_memory_resource_manager import get_high_memory_resource_manager
            hrm = get_high_memory_resource_manager()
            print("   ‚úÖ High Memory Resource Manager: WORKING")
        except Exception as e:
            print(f"   ‚ùå High Memory Resource Manager: {e}")
        
        # Summary
        print("\n" + "=" * 50)
        print("üìä INTEGRATION SUMMARY:")
        
        overall_score = 0
        total_tests = 5
        
        if menu.resource_manager:
            print("‚úÖ Master Menu RM Integration: PASS")
            overall_score += 1
        else:
            print("‚ùå Master Menu RM Integration: FAIL")
            
        if menu.menu_1:
            print("‚úÖ Menu 1 Availability: PASS")
            overall_score += 1
        else:
            print("‚ùå Menu 1 Availability: FAIL")
            
        if hasattr(menu1, 'resource_manager') and menu1.resource_manager:
            print("‚úÖ Menu 1 Unified RM: PASS")
            overall_score += 1
        else:
            print("‚ùå Menu 1 Unified RM: FAIL")
            
        if hasattr(menu1, 'enterprise_resource_manager'):
            print("‚úÖ Menu 1 Enterprise RM: PASS")
            overall_score += 1
        else:
            print("‚ùå Menu 1 Enterprise RM: FAIL")
            
        if success:
            print("‚úÖ Overall System Integration: PASS")
            overall_score += 1
        else:
            print("‚ùå Overall System Integration: FAIL")
        
        percentage = (overall_score / total_tests) * 100
        print(f"\nüéØ INTEGRATION SCORE: {overall_score}/{total_tests} ({percentage:.0f}%)")
        
        if percentage >= 80:
            print("üéâ EXCELLENT - Resource Management is well integrated!")
        elif percentage >= 60:
            print("‚ö†Ô∏è GOOD - Most systems integrated, some improvements needed")
        else:
            print("‚ùå NEEDS WORK - Significant integration issues detected")
            
        return overall_score >= 4
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_integration() 