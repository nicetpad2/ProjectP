#!/usr/bin/env python3
"""
üåü NICEGOLD ENTERPRISE MENU 1 LOGGER SYSTEM
‡∏£‡∏∞‡∏ö‡∏ö Logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Menu 1 Full Pipeline ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
Advanced Progress Tracking & Real-time Monitoring for Menu 1

üéØ Enterprise Features:
- ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡∏ô‡∏≠‡∏°‡∏™‡∏≤‡∏¢‡∏ï‡∏≤
- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Progress ‡πÅ‡∏ö‡∏ö Real-time
- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error/Warning ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- ‡∏£‡∏∞‡∏ö‡∏ö Reporting ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Enterprise Grade
"""

import logging
import sys
import os
from datetime import datetime
from typing import Dict, List, Callable
import json
import threading
from enum import Enum
from collections import defaultdict
import colorama
from colorama import Fore, Style, Back

# Initialize colorama for Windows
colorama.init(autoreset=True)


class ProcessStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
    STARTING = "üöÄ STARTING"
    RUNNING = "‚ö° RUNNING"
    SUCCESS = "‚úÖ SUCCESS"
    WARNING = "‚ö†Ô∏è WARNING"
    ERROR = "‚ùå ERROR"
    CRITICAL = "üî• CRITICAL"
    COMPLETED = "üéâ COMPLETED"


class Menu1Logger:
    """
    Enterprise Logger System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Menu 1 Full Pipeline
    ‡∏£‡∏∞‡∏ö‡∏ö Logging ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Menu 1 ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    """
    
    def __init__(self, session_id: str = None):
        self.session_id = session_id or f"menu1_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.start_time = datetime.now()
        self.processes = {}
        self.step_counter = 0
        self.error_count = 0
        self.warning_count = 0
        self.success_count = 0
        self.lock = threading.Lock()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á log directories
        self._create_log_directories()
        
        # Setup logging
        self._setup_enterprise_logging()
        
        # Track performance metrics
        self.performance_metrics = {
            'total_steps': 0,
            'completed_steps': 0,
            'errors': [],
            'warnings': [],
            'processing_times': {}
        }
        
        # Color scheme ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Menu 1
        self.colors = {
            'header': Fore.CYAN + Style.BRIGHT,
            'success': Fore.GREEN + Style.BRIGHT,
            'warning': Fore.YELLOW + Style.BRIGHT,
            'error': Fore.RED + Style.BRIGHT,
            'critical': Fore.MAGENTA + Style.BRIGHT,
            'info': Fore.BLUE + Style.BRIGHT,
            'progress': Fore.CYAN,
            'step': Fore.WHITE + Style.BRIGHT,
            'reset': Style.RESET_ALL
        }
    
    def _create_log_directories(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á directory structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logs"""
        directories = [
            'logs',
            'logs/menu1',
            'logs/menu1/processes',
            'logs/menu1/errors',
            'logs/menu1/warnings',
            'logs/menu1/performance',
            'logs/menu1/sessions'
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
    
    def _setup_enterprise_logging(self):
        """Setup enterprise-grade logging system"""
        # Create logger
        self.logger = logging.getLogger(f'Menu1_{self.session_id}')
        self.logger.setLevel(logging.DEBUG)
        
        # Clear existing handlers
        self.logger.handlers.clear()
        
        # Console handler with beautiful formatting
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
        self.logger.addHandler(console_handler)
        
        # File handler for session logs
        session_file = f'logs/menu1/sessions/{self.session_id}.log'
        file_handler = logging.FileHandler(session_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(file_formatter)
        self.logger.addHandler(file_handler)
        
        # Error file handler
        error_file = f'logs/menu1/errors/{self.session_id}_errors.log'
        error_handler = logging.FileHandler(error_file, encoding='utf-8')
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(file_formatter)
        self.logger.addHandler(error_handler)
    
    def start_menu1_session(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Menu 1 Session"""
        header = f"""
{self.colors['header']}{'='*80}
üåü NICEGOLD ENTERPRISE - MENU 1 FULL PIPELINE SESSION STARTED
{'='*80}{self.colors['reset']}

{self.colors['info']}üìÖ Session ID: {self.session_id}
üïê Start Time: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}
üéØ Target: AUC ‚â• 70% | üõ°Ô∏è Enterprise Grade | üìä Real Data Only{self.colors['reset']}

{self.colors['header']}{'='*80}{self.colors['reset']}
"""
        print(header)
        self.logger.info(f"Menu 1 Full Pipeline Session Started - {self.session_id}")
    
    def log_step(self, step_num: int, step_name: str, status: ProcessStatus, 
                 details: str = "", progress: int = 0):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Step ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á Menu 1 Pipeline
        """
        with self.lock:
            self.step_counter += 1
            timestamp = datetime.now()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            progress_bar = self._create_progress_bar(progress)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ status
            if status == ProcessStatus.SUCCESS:
                status_color = self.colors['success']
                self.success_count += 1
            elif status == ProcessStatus.WARNING:
                status_color = self.colors['warning']
                self.warning_count += 1
            elif status in [ProcessStatus.ERROR, ProcessStatus.CRITICAL]:
                status_color = self.colors['error']
                self.error_count += 1
            else:
                status_color = self.colors['info']
            
            # Format message
            message = f"""
{self.colors['step']}‚îå‚îÄ STEP {step_num:02d}: {step_name} ‚îÄ{self.colors['reset']}
{status_color}‚îú‚îÄ Status: {status.value}{self.colors['reset']}
{self.colors['progress']}‚îú‚îÄ Progress: {progress_bar} ({progress}%){self.colors['reset']}"""
            
            if details:
                message += f"\n{self.colors['info']}‚îú‚îÄ Details: {details}{self.colors['reset']}"
            
            message += f"\n{self.colors['step']}‚îî‚îÄ Time: {timestamp.strftime('%H:%M:%S')}{self.colors['reset']}\n"
            
            print(message)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô log file
            log_entry = {
                'timestamp': timestamp.isoformat(),
                'step_number': step_num,
                'step_name': step_name,
                'status': status.value,
                'details': details,
                'progress': progress
            }
            
            self.processes[f'step_{step_num}'] = log_entry
            self.logger.info(f"Step {step_num}: {step_name} - {status.value} - {details}")
    
    def _create_progress_bar(self, progress: int, width: int = 30) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
        filled = int(width * progress / 100)
        bar = '‚ñà' * filled + '‚ñë' * (width - filled)
        return f"[{bar}]"
    
    def log_error(self, error_msg: str, exception: Exception = None, 
                  step_name: str = "Unknown"):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Error ‡πÅ‡∏ö‡∏ö Enterprise Grade
        """
        with self.lock:
            self.error_count += 1
            timestamp = datetime.now()
            
            error_details = {
                'timestamp': timestamp.isoformat(),
                'step_name': step_name,
                'error_message': error_msg,
                'exception_type': type(exception).__name__ if exception else None,
                'exception_details': str(exception) if exception else None,
                'traceback': None
            }
            
            if exception:
                import traceback as tb
                error_details['traceback'] = tb.format_exc()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            error_display = f"""
{self.colors['error']}{'='*60}
üî• ERROR DETECTED - IMMEDIATE ATTENTION REQUIRED
{'='*60}{self.colors['reset']}

{self.colors['error']}üìç Step: {step_name}
üí• Error: {error_msg}
üïê Time: {timestamp.strftime('%H:%M:%S')}
{self.colors['reset']}"""
            
            if exception:
                error_display += f"\n{self.colors['error']}üîß Exception: {type(exception).__name__}: {str(exception)}{self.colors['reset']}"
            
            error_display += f"\n{self.colors['error']}{'='*60}{self.colors['reset']}\n"
            
            print(error_display)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô performance metrics
            self.performance_metrics['errors'].append(error_details)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô log file
            self.logger.error(f"ERROR in {step_name}: {error_msg}")
            if exception:
                self.logger.error(f"Exception: {type(exception).__name__}: {str(exception)}")
    
    def log_warning(self, warning_msg: str, step_name: str = "Unknown"):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Warning ‡πÅ‡∏ö‡∏ö Enterprise Grade
        """
        with self.lock:
            self.warning_count += 1
            timestamp = datetime.now()
            
            warning_details = {
                'timestamp': timestamp.isoformat(),
                'step_name': step_name,
                'warning_message': warning_msg
            }
            
            # ‡πÅ‡∏™‡∏î‡∏á warning ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            warning_display = f"""
{self.colors['warning']}‚ö†Ô∏è WARNING: {warning_msg}
üìç Step: {step_name} | üïê Time: {timestamp.strftime('%H:%M:%S')}{self.colors['reset']}
"""
            
            print(warning_display)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô performance metrics
            self.performance_metrics['warnings'].append(warning_details)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô log file
            self.logger.warning(f"WARNING in {step_name}: {warning_msg}")
    
    def log_success(self, success_msg: str, step_name: str = "Unknown", 
                    metrics: Dict = None):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Success ‡πÅ‡∏ö‡∏ö Enterprise Grade
        """
        with self.lock:
            self.success_count += 1
            timestamp = datetime.now()
            
            # ‡πÅ‡∏™‡∏î‡∏á success ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            success_display = f"""
{self.colors['success']}‚úÖ SUCCESS: {success_msg}
üìç Step: {step_name} | üïê Time: {timestamp.strftime('%H:%M:%S')}{self.colors['reset']}"""
            
            if metrics:
                success_display += f"\n{self.colors['info']}üìä Metrics: {metrics}{self.colors['reset']}"
            
            success_display += "\n"
            
            print(success_display)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô log file
            self.logger.info(f"SUCCESS in {step_name}: {success_msg}")
            if metrics:
                self.logger.info(f"Metrics: {metrics}")
    
    def complete_menu1_session(self, final_results: Dict):
        """
        ‡∏à‡∏ö Menu 1 Session ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á comprehensive report
        """
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate
        total_operations = self.success_count + self.error_count + self.warning_count
        success_rate = (self.success_count / total_operations * 100) if total_operations > 0 else 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á final report
        report = f"""
{self.colors['header']}{'='*80}
üéâ MENU 1 FULL PIPELINE SESSION COMPLETED
{'='*80}{self.colors['reset']}

{self.colors['info']}üìÖ Session ID: {self.session_id}
üïê Duration: {duration}
üìä Success Rate: {success_rate:.1f}%

üìà OPERATION SUMMARY:
   ‚úÖ Successes: {self.success_count}
   ‚ö†Ô∏è Warnings: {self.warning_count}
   ‚ùå Errors: {self.error_count}

üéØ FINAL RESULTS:{self.colors['reset']}"""
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        for key, value in final_results.items():
            if isinstance(value, float):
                report += f"\n{self.colors['success']}   {key}: {value:.4f}{self.colors['reset']}"
            else:
                report += f"\n{self.colors['success']}   {key}: {value}{self.colors['reset']}"
        
        # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        if success_rate >= 90:
            quality_grade = f"{self.colors['success']}üèÜ EXCELLENT{self.colors['reset']}"
        elif success_rate >= 80:
            quality_grade = f"{self.colors['success']}‚úÖ GOOD{self.colors['reset']}"
        elif success_rate >= 70:
            quality_grade = f"{self.colors['warning']}‚ö†Ô∏è ACCEPTABLE{self.colors['reset']}"
        else:
            quality_grade = f"{self.colors['error']}‚ùå NEEDS IMPROVEMENT{self.colors['reset']}"
        
        report += f"\n\n{self.colors['info']}üèÖ Quality Grade: {quality_grade}"
        report += f"\n\n{self.colors['header']}{'='*80}{self.colors['reset']}\n"
        
        print(report)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å comprehensive report
        self._save_comprehensive_report(final_results, duration, success_rate)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô log file
        self.logger.info(f"Menu 1 Session Completed - Duration: {duration}, Success Rate: {success_rate:.1f}%")
        self.logger.info(f"Final Results: {final_results}")
    
    def _save_comprehensive_report(self, final_results: Dict, duration, success_rate: float):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å comprehensive report ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        """
        report_data = {
            'session_info': {
                'session_id': self.session_id,
                'start_time': self.start_time.isoformat(),
                'end_time': datetime.now().isoformat(),
                'duration_seconds': duration.total_seconds(),
                'duration_formatted': str(duration)
            },
            'operation_summary': {
                'total_steps': self.step_counter,
                'success_count': self.success_count,
                'warning_count': self.warning_count,
                'error_count': self.error_count,
                'success_rate': success_rate
            },
            'final_results': final_results,
            'performance_metrics': self.performance_metrics,
            'all_processes': self.processes
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSON file
        report_file = f'logs/menu1/sessions/{self.session_id}_report.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"{self.colors['info']}üìã Comprehensive report saved: {report_file}{self.colors['reset']}")
    
    def get_session_stats(self) -> Dict:
        """
        ‡∏î‡∏∂‡∏á session statistics
        """
        return {
            'session_id': self.session_id,
            'total_steps': self.step_counter,
            'success_count': self.success_count,
            'warning_count': self.warning_count,
            'error_count': self.error_count,
            'duration': str(datetime.now() - self.start_time)
        }


# ‡∏™‡∏£‡πâ‡∏≤‡∏á singleton instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Menu 1
_menu1_logger = None

def get_menu1_logger(session_id: str = None) -> Menu1Logger:
    """
    ‡∏î‡∏∂‡∏á Menu1Logger instance (Singleton pattern)
    """
    global _menu1_logger
    if _menu1_logger is None or session_id:
        _menu1_logger = Menu1Logger(session_id)
    return _menu1_logger


# Convenience functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def log_step(step_num: int, step_name: str, status: ProcessStatus, 
             details: str = "", progress: int = 0):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å step ‡πÉ‡∏ô Menu 1 Pipeline"""
    logger = get_menu1_logger()
    logger.log_step(step_num, step_name, status, details, progress)


def log_error(error_msg: str, exception: Exception = None, step_name: str = "Unknown"):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÉ‡∏ô Menu 1 Pipeline"""
    logger = get_menu1_logger()
    logger.log_error(error_msg, exception, step_name)


def log_warning(warning_msg: str, step_name: str = "Unknown"):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å warning ‡πÉ‡∏ô Menu 1 Pipeline"""
    logger = get_menu1_logger()
    logger.log_warning(warning_msg, step_name)


def log_success(success_msg: str, step_name: str = "Unknown", metrics: Dict = None):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å success ‡πÉ‡∏ô Menu 1 Pipeline"""
    logger = get_menu1_logger()
    logger.log_success(success_msg, step_name, metrics)


def start_menu1_session(session_id: str = None):
    """‡πÄ‡∏£‡∏¥‡πà‡∏° Menu 1 Session"""
    logger = get_menu1_logger(session_id)
    logger.start_menu1_session()
    return logger


def complete_menu1_session(final_results: Dict):
    """‡∏à‡∏ö Menu 1 Session"""
    logger = get_menu1_logger()
    logger.complete_menu1_session(final_results)
