#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üè¢ NICEGOLD ENTERPRISE PROJECTP - RESOURCE MANAGER WRAPPER
Simple Resource Manager Wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility

‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö unified_resource_manager.py
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import get_resource_manager ‡πÑ‡∏î‡πâ

‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 1.0 Enterprise Edition
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 11 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: Production Ready
"""

# Disable type checking for this wrapper file
# type: ignore

import sys
import warnings

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')

def get_resource_manager(config=None):
    """
    ‚úÖ ENTERPRISE RESOURCE MANAGER ACCESSOR
    
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Unified Resource Manager
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    
    Args:
        config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resource manager (optional dict)
        
    Returns:
        UnifiedResourceManager instance
    """
    try:
        # Import the unified resource manager
        from core.unified_resource_manager import get_unified_resource_manager
        
        # Get the manager instance
        manager = get_unified_resource_manager(config or {})  # type: ignore
        
        return manager
        
    except ImportError as e:
        print(f"‚ùå Error: Could not import unified_resource_manager: {e}")
        raise ImportError(
            "‚ùå Unified Resource Manager is not available. "
            "Please check dependencies or imports."
        )
    except Exception as e:
        print(f"‚ùå Error initializing resource manager: {e}")
        raise


def create_resource_manager(config=None):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Resource Manager instance ‡πÉ‡∏´‡∏°‡πà
    
    Args:
        config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resource manager (optional dict)
        
    Returns:
        UnifiedResourceManager instance
    """
    try:
        # Import the unified resource manager class
        from core.unified_resource_manager import UnifiedResourceManager
        
        # Create new instance directly
        return UnifiedResourceManager(config or {})  # type: ignore
        
    except ImportError as e:
        print(f"‚ùå Error: Could not import UnifiedResourceManager: {e}")
        raise ImportError(
            "‚ùå Unified Resource Manager is not available. "
            "Please check dependencies or imports."
        )
    except Exception as e:
        print(f"‚ùå Error creating resource manager: {e}")
        raise


def get_default_resource_config():
    """
    ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resource manager
    
    Returns:
        dict: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default
    """
    return {
        'target_utilization': 0.80,    # 80% target utilization
        'safety_margin': 0.15,         # 15% safety margin
        'emergency_reserve': 0.05,     # 5% emergency reserve
        'monitoring_interval': 5.0,    # 5 seconds monitoring
        'history_limit': 1000          # 1000 history entries
    }


# ====================================================
# COMPATIBILITY FUNCTIONS
# ====================================================

def check_resource_manager_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á resource manager"""
    try:
        # Try to create a manager instance
        manager = get_resource_manager()
        print("‚úÖ Resource Manager health check: PASSED")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Resource Manager health check: FAILED ({e})")
        return False


# ====================================================
# EXPORTS AND ALIASES
# ====================================================

# Create aliases for backward compatibility
get_resource_manager_instance = get_resource_manager
create_resource_manager_instance = create_resource_manager

# Module exports
__all__ = [
    'get_resource_manager',
    'create_resource_manager', 
    'get_default_resource_config',
    'check_resource_manager_health',
    'get_resource_manager_instance',
    'create_resource_manager_instance'
]


# ====================================================
# MAIN FOR TESTING
# ====================================================

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üè¢ NICEGOLD ENTERPRISE - RESOURCE MANAGER WRAPPER TEST")
    print("=" * 60)
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á resource manager
        print("\nüîß Testing resource manager creation...")
        manager = get_resource_manager()
        print(f"‚úÖ Resource manager created: {type(manager).__name__}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health check
        print("\nüè• Running health check...")
        health_ok = check_resource_manager_health()
        print(f"‚úÖ Health check: {'PASSED' if health_ok else 'FAILED'}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default
        print("\n‚öôÔ∏è Testing default config...")
        config = get_default_resource_config()
        print(f"‚úÖ Default config loaded: {len(config)} settings")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        print("\nüìä Testing resource status...")
        if hasattr(manager, 'get_resource_status'):
            try:
                status = manager.get_resource_status()
                print(f"‚úÖ Resource status retrieved: {len(status)} resources")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not get resource status: {e}")
        
        print("\nüéâ All tests completed successfully!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 